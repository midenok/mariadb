# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

resources:
    containers:

    - container: rhel-6
      image: mariadbe.azurecr.io/build-es:rhel-6
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: rhel-7
      image: mariadbe.azurecr.io/build-es:rhel-7
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: rhel-8
      image: mariadbe.azurecr.io/build-es:rhel-8
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: sles-12
      image: mariadbe.azurecr.io/build-es:sles-12
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: sles-15
      image: mariadbe.azurecr.io/build-es:sles-15
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: ubuntu-1604
      image: mariadbe.azurecr.io/build-es:ubuntu-1604
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: ubuntu-1804
      image: mariadbe.azurecr.io/build-es:ubuntu-1804
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: debian-8
      image: mariadbe.azurecr.io/build-es:debian-8
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: debian-9
      image: mariadbe.azurecr.io/build-es:debian-9
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

    - container: debian-10
      image: mariadbe.azurecr.io/build-es:debian-10
      endpoint: acr-mariadbe-connection
      options: --shm-size 12G

variables:
  configuration: RelWithDebInfo
  platform: x64
  TEST_RESULTS_FILE: 'test-results.log'
  MTR_FEEDBACK_PLUGIN: 1
  DEBIAN_FRONTEND: noninteractive
  MYSQL_VARDIR: '/var/tmp/mtr'
  DEB_LOCAL_LIST: '/etc/apt/sources.list.d/localInstall.list'
  BUILDDIR: "$(Build.SourcesDirectory)/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX_ON_ES_BACKUP_DEBUGSOURCE"
#
stages:

- stage: BuildPackages_Stage0

  jobs:

  - template: azure/stage0/build-source-tarball.yml

  - template: azure/stage0/build-binary-tarballs.yml
    parameters:
      BuildType: RelWithDebInfo
      Artifact: Release

  - template: azure/stage0/build-rpm-packages.yml
  - template: azure/stage0/build-deb-packages.yml

  - template: azure/stage0/build-windows-packages.yml
    parameters:
      Artifact: Release
      BuildType: RelWithDebInfo

  - template: azure/stage0/build-macos-packages.yml
    parameters:
      Artifact: Release
      BuildType: RelWithDebInfo

#################################
########## STAGE 0 END ##########
#################################


#################################
######### STAGE 1 BEGIN #########
#################################

- stage: TestPackages_Stage1
  dependsOn: BuildPackages_Stage0
  condition: succeededOrFailed()
  jobs:

  - job: TestTarball_Quick
    timeoutInMinutes: 240
    workspace:
      clean: all
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        rhel-7:
          containerImage: rhel-7
        rhel-8:
          containerImage: rhel-8
        ubuntu-1804:
          containerImage: ubuntu-1804
    container: $[variables['containerImage']]

    steps:

    - checkout: none
    - template: azure/fetch-unpack-tarball.yml
      parameters:
        Artifact: Release

    - template: azure/tests/run-mtr-test.yml
      parameters:
        MtrArgs: '--mem --force --verbose-restart --skip-test-list=unstable-tests --parallel=auto'
        TestName: 'Quick Test - Release'

    - template: azure/install-galera.yml
    - template: azure/tests/run-mtr-test.yml
      parameters:
        MtrArgs: "--force --parallel=auto --suite=galera,galera_sr,wsrep --max-test-fail=0 --testcase-timeout=120 --vardir=$(MYSQL_VARDIR) --big-test"
        TestName: 'Galera --big-test - Release'

  - job: TestRPMs_Quick
    timeoutInMinutes: 280
    workspace:
      clean: all
    strategy:
      maxParallel: 1
      matrix:
        rhel-6:
          poolName: 'rhel-6'
        rhel-7:
          poolName: 'rhel-7'
        rhel-8:
          poolName: 'rhel-8'
        sles-12:
          poolName: 'sles-12'
        sles-15:
          poolName: 'sles-15'
    pool:
      name: $(poolName)

    steps:

    - checkout: none
    - template: azure/prepare-vm-for-installation.yml

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        specificBuildWithTriggering: true
        downloadType: 'single'
        artifactName: '$(poolName)-RPMS'
        downloadPath: '$(System.ArtifactsDirectory)/current'

    - bash: |
        set -x
        ls -la '$(System.ArtifactsDirectory)'
        sudo yum -y --nogpgcheck install '$(System.ArtifactsDirectory)'/current/'$(poolName)'-RPMS/*.rpm
      displayName: "Install built RPM packages on Centos/RHEL"
      condition: and(succeeded(), in(variables['poolName'], 'rhel-6', 'rhel-7', 'rhel-8'))

    - bash: |
        set -x
        ls -la '$(System.ArtifactsDirectory)'
        sudo zypper --no-gpg-checks -n install '$(System.ArtifactsDirectory)'/current/'$(poolName)'-RPMS/*.rpm
      displayName: "Install built RPM packages on SLES"
      condition: and(succeeded(), in(variables['poolName'], 'sles-12', 'sles-15'))


    - template: azure/tests/select-insert-test.yml
    - template: azure/tests/run-acceptance-tests.yml

  - job: TestDEBs_Quick
    timeoutInMinutes: 280
    workspace:
      clean: all
    strategy:
      maxParallel: 1
      matrix:
        ubuntu-1804:
          poolName: 'ubuntu-1804'
        debian-10:
          poolName: 'debian-10'
    pool:
      name: $(poolName)

    steps:

    - checkout: none
    - template: azure/prepare-vm-for-installation.yml
    - template: azure/install-galera.yml

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        specificBuildWithTriggering: true
        downloadType: 'single'
        artifactName: '$(poolName)-DEBS'
        downloadPath: '$(System.ArtifactsDirectory)/current'

    - bash: |
        set -x
        ls -la '$(System.ArtifactsDirectory)'

        sudo sh -c "echo 'deb [trusted=yes] file://$(System.ArtifactsDirectory)/current/$(poolName)-DEBS binary/' > ${DEB_LOCAL_LIST}"
        sudo apt update
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get --allow-unauthenticated -y -f install \
          mariadb-server mariadb-test mariadb-backup mariadb-plugin-connect \
          mariadb-plugin-cracklib-password-check mariadb-plugin-gssapi-client \
          mariadb-plugin-gssapi-server mariadb-plugin-mroonga mariadb-plugin-oqgraph \
          mariadb-plugin-rocksdb mariadb-plugin-spider
        dpkg -l | grep -iE "galera|maria"
      displayName: "Install built DEB packages"

    - template: azure/tests/select-insert-test.yml
    - template: azure/tests/run-acceptance-tests.yml

  - job: TestMSI_Quick
    timeoutInMinutes: 10
    pool:
      vmImage: 'windows-2019'

    steps:

    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        specificBuildWithTriggering: true
        downloadType: 'single'
        artifactName: Windows-Release
        downloadPath: '$(System.ArtifactsDirectory)'

    - powershell: |
        Set-PSDebug -Trace 1
        $MSI=(Get-Childitem -Path $(System.ArtifactsDirectory)\Windows-Release -Filter *.msi).fullname
        Start-Process msiexec.exe -Wait -ArgumentList "/I $MSI PASSWORD=tESt123%_password SERVICENAME=MariaDB-Enterprise /qn /l*v .\msi-install-log.txt"

        $ProgramFilesPath = [Environment]::GetEnvironmentVariable("ProgramW6432")
        Get-Childitem -Path $ProgramFilesPath -Recurse -Filter mysql.exe

        Get-Content -Path .\msi-install-log.txt
      displayName: "Install Windows MSI package"

    - template: azure/tests/win-select-insert.yml
#
#################################
########## STAGE 1 END ##########
#################################
#
