create table t (a int) with system versioning;
set @before= UNIX_TIMESTAMP(now(6));
insert into t values (1);
set @after= UNIX_TIMESTAMP(now(6));
update t set a= 2;

show global variables like 'system_versioning_asof';
show variables like 'system_versioning_asof';
select * from t;

set system_versioning_asof= '2031-1-1 0:0:0';
show variables like 'system_versioning_asof';
select * from t;

set system_versioning_asof= '2011-1-1 0:0:0';
show variables like 'system_versioning_asof';
select * from t;

# global
--error ER_WRONG_VALUE_FOR_VAR
set global system_versioning_asof= 'alley';
--error ER_WRONG_VALUE_FOR_VAR
set global system_versioning_asof= null;
--error ER_WRONG_TYPE_FOR_VAR
set global system_versioning_asof= 1;
--error ER_WRONG_TYPE_FOR_VAR
set global system_versioning_asof= 1.1;

# session
--error ER_WRONG_VALUE_FOR_VAR
set system_versioning_asof= 'alley';
--error ER_WRONG_VALUE_FOR_VAR
set system_versioning_asof= null;
--error ER_WRONG_TYPE_FOR_VAR
set system_versioning_asof= 1;
--error ER_WRONG_TYPE_FOR_VAR
set system_versioning_asof= 1.1;

--echo # GLOBAL @@system_versioning_asof
set global system_versioning_asof= '1991-11-11 11:11:11.1111119';
show global variables like 'system_versioning_asof';

set global system_versioning_asof= '1990-01-01 00:00:00';
show global variables like 'system_versioning_asof';

set global system_versioning_asof= timestamp'1991-11-11 11:11:11.1111119';
show global variables like 'system_versioning_asof';

set @ts= timestamp'1990-01-01 00:00:00';
set global system_versioning_asof= @ts;
show global variables like 'system_versioning_asof';

set global system_versioning_asof= default;
select @@global.system_versioning_asof;

--echo # SESSION @@system_versioning_asof
set system_versioning_asof= '1991-11-11 11:11:11.1111119';
show variables like 'system_versioning_asof';

set system_versioning_asof= '1990-01-01 00:00:00';
show variables like 'system_versioning_asof';

set system_versioning_asof= timestamp'1991-11-11 11:11:11.1111119';
show variables like 'system_versioning_asof';

set @ts= timestamp'1990-01-01 00:00:00';
set system_versioning_asof= @ts;
show variables like 'system_versioning_asof';

--echo # DEFAULT: value is copied from GLOBAL to SESSION
set global time_zone= "+03:00";
set time_zone= "+10:00";
set global system_versioning_asof= timestamp'1991-11-11 11:11:11.111111';
set system_versioning_asof= '1990-01-01 00:00:00';
select @@global.system_versioning_asof != @@system_versioning_asof as different;
set system_versioning_asof= default;
select @@global.system_versioning_asof = @@system_versioning_asof as equal;

set global time_zone= DEFAULT;
set time_zone= DEFAULT;
set global system_versioning_asof= DEFAULT;
set system_versioning_asof= DEFAULT;
select @@global.system_versioning_asof, @@system_versioning_asof;

select * from t for system_time all;

select * from t;
select * from t for system_time as of timestamp current_timestamp(6);
select * from t for system_time all;
select * from t for system_time from '1970-01-01 00:00' to current_timestamp(6);
select * from t for system_time between '1970-01-01 00:00' and current_timestamp(6);

-- echo # MDEV-16026: Global system_versioning_asof must not be used if client sessions can have non-default time zone
-- echo # changing time zone should not abuse `system_versioning_asof`

set global time_zone = '+10:00';
set global system_versioning_asof = '1999-09-08 00:00:00.000000';
show global variables like 'system_versioning_asof';
set global time_zone = '+03:00';
show global variables like 'system_versioning_asof';

set session time_zone = '+03:00';
set session system_versioning_asof = '2000-09-08 00:00:00.000000';
show session variables like 'system_versioning_asof';
set session time_zone = '+10:00';
show session variables like 'system_versioning_asof';
-- echo # global and local time zones should not interfere
show global variables like 'system_versioning_asof';

set time_zone= "+10:00";
set system_versioning_asof= FROM_UNIXTIME(@before);
select * from t as empty;
set system_versioning_asof= FROM_UNIXTIME(@after);
select * from t as nonempty;

set time_zone= "+03:00";
set system_versioning_asof= FROM_UNIXTIME(@before);
select * from t as empty;
set system_versioning_asof= FROM_UNIXTIME(@after);
select * from t as nonempty;

set global system_versioning_asof= FROM_UNIXTIME(@after);
select * from t as nonempty;

--connect (subcon,127.0.0.1,root,,,$SERVER_MYPORT_1)
--connection subcon
select * from t as nonempty;
--disconnect subcon
--connection default

set global system_versioning_asof= FROM_UNIXTIME(@before);
select * from t as nonempty;

--connect (subcon,127.0.0.1,root,,,$SERVER_MYPORT_1)
--connection subcon
select * from t as empty;
--disconnect subcon
--connection default

--echo # MDEV-16481: set global system_versioning_asof=sf() crashes in specific case
--echo # Using global variable inside a stored function should not crash
create or replace function now_global() returns timestamp
  return  CONVERT_TZ(now(), @@session.time_zone, @@global.time_zone);
set global system_versioning_asof= now_global();
drop function now_global;

set global time_zone= "SYSTEM";
set time_zone= "SYSTEM";
set global system_versioning_asof= "DEFAULT";
set system_versioning_asof= "DEFAULT";

show status like "Feature_system_versioning";

--echo #
--echo # MDEV-16546 System versioning setting to allow history modification
--echo #
--source suite/versioning/engines.inc
--source suite/versioning/common.inc
--source suite/versioning/t/sysvars.inc
set system_versioning_modify_history= on;

--replace_result $sys_datatype_expl SYS_DATATYPE
eval create or replace table t (
  a int primary key,
  row_start $sys_datatype_expl as row start invisible,
  row_end $sys_datatype_expl as row end invisible,
  period for system_time (row_start, row_end)
) with system versioning;

insert into t values (1);
update t set a= 2;

--echo ## UPDATE of historical row
update t set row_start= @s1, row_end= @e1 where a= 1;
--echo ## UPDATE of current row
update t set row_start= @s2, row_end= @e2 where a= 2;
--echo ## INSERT historical row
insert into t (a, row_start, row_end) values (3, @s3, @e3);
--echo ## normal INSERT
# TODO: implement DEFAULT values for row_start, row_end. Hard to do now because of TRX_ID.
insert into t (a) values (4);
select * from t;
--echo ## normal UPDATE
update t set a= 5;
select *, check_row(row_start, row_end) from t for system_time all order by a;
--echo ## Multi-row INSERT
create or replace table t2 like t;
insert into t2 (a, row_start, row_end) values (1, @s1, @e1), (2, @s2, @e2);
select *, check_row(row_start, row_end) from t2 for system_time all order by a;
--echo ## INSERT..SELECT
create or replace table t2 like t;
insert into t2 (a, row_start, row_end) select a, row_start, row_end from t for system_time all;
select *, check_row(row_start, row_end) from t2 for system_time all order by a;
--echo ## Multi-UPDATE
update t, t2 set t.row_start= @s1, t2.row_start= @s1, t.row_end= @s1, t2.row_end= @s1 where t.a > 3 and t2.a > 3;
select *, check_row(row_start, row_end) from t for system_time all order by a;
select *, check_row(row_start, row_end) from t2 for system_time all order by a;
--echo ## REPLACE
replace t (a, row_start, row_end) values (1, @s3, @e1), (2, @e2, @e2);
select *, check_row(row_start, row_end) from t for system_time all order by a;

--echo ## LOAD DATA
--let DATAFILE= $MYSQLTEST_VARDIR/tmp/test_sysvars_t.data
--replace_result $DATAFILE DATAFILE
eval select *, row_start, row_end from t for system_time all into outfile '$DATAFILE';
create or replace table t3 like t;
--replace_result $DATAFILE DATAFILE
eval load data infile '$DATAFILE' into table t3 (a, row_start, row_end);
select *, check_row(row_start, row_end) from t3 for system_time all order by a;
--remove_file $DATAFILE

--echo ## Honor secure_timestamp option
--let $restart_parameters= --secure-timestamp=YES --system-versioning-modify-history=on
--source include/restart_mysqld.inc
--source suite/versioning/t/sysvars.inc
--error ER_WARNING_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN
insert into t (a, row_start, row_end) values (6, @s3, @e3);
show warnings;
--let $restart_parameters= --secure-timestamp=REPLICATION --system-versioning-modify-history=on
--source include/restart_mysqld.inc
--source suite/versioning/t/sysvars.inc
--error ER_WARNING_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN
insert into t (a, row_start, row_end) values (7, @s3, @e3);
show warnings;
--let $restart_parameters= --secure-timestamp=SUPER --system-versioning-modify-history=on
--source include/restart_mysqld.inc
--source suite/versioning/t/sysvars.inc
insert into t (a, row_start, row_end) values (8, @s3, @e3);
create user nobody;
change_user nobody;
use test;
--error ER_SPECIFIC_ACCESS_DENIED_ERROR
insert into t (a, row_start, row_end) values (9, @s3, @e3);

drop database test;
create database test;

